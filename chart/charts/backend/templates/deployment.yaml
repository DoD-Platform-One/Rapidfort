apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{ if eq .Values.env.rf_debug  true }}
      {{ if eq .Values.env.deploy_mode  "STANDALONE" }}
      - name: code
        hostPath:
          path: /root/rapidfort
      {{ end }}          
      {{ end }}      
      {{ if .Values.volumes }}
      {{ tpl (toYaml (index .Values.volumes )) . | nindent 6 }}
      {{ end }}      
      # initContainers:
      # - name: init
      #   image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/init:1.1.0-271e065-19
      #   command:
      #     - "/bin/bash"
      #     - "-c"
      #     - "until [ $(curl --connect-timeout 10 -sw '%{http_code}' http://{{ .Values.keycloak.serviceName }}.default.svc.cluster.local -o /dev/null) -eq 200 ]; do echo keycloak not ready; sleep 1; done"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if eq .Values.env.rf_debug  true }}
          workingDir: /root/rapidfort/backend
          command: ["/bin/sh", "-c", "sleep infinity"]
          {{ end }}          
          env:
            #Start: Below variable are required for tunnel stub
            {{ if .Values.tunnelStubendabled }}
            - name: AMI_IMAGE_ID
              value: "{{ .Values.env.ami_image_id }}"
            - name: KEYPAIR_NAME
              value: "rf-iso-worker-1.0"
            - name: SECGROUP_ID
              value: "{{ .Values.env.security_group_id }}"
            - name: VPC_SUBNET_ID
              value: "{{ .Values.env.vpc_subnet_id }}"
            - name: "BACKEND_SERVICE_NAME"
              value: "{{ .Values.env.backend_service_name}}"
            - name: VMPOOL_SERVER_ADDR
              value: "{{ .Values.env.vmpool_server_addr }}"
            {{ end }}
            #End
            - name: AUTH_SERVER_ROOT_URL
              value: "http://{{ .Values.keycloak.serviceName }}"
            - name: DEPLOY_MODE
              value: "{{ .Values.env.deployment_mode }}"
            #NOTE: not using secret as secret goes for all the containers.
            - name: RF_DEBUG
              value:  "{{ .Values.env.debug }}"
            - name: RF_VERSION_FILE
              value:  "/opt/rapidfort/env-config/.env"
            #inject create values as env variable.
            {{ if .Values.secret.name }}
            {{- $secretName := .Values.secret.name }}
            {{- range .Values.secret.keys }}
            - name: {{ . | quote}}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ . | quote}}
            {{- end }}
            {{ end }}
            {{ if .Values.rf_role_arn }}
            - name: RF_ROLE_ARN
              value: "{{ .Values.env.rf_role_arn }}"
            {{ end }}
            - name: RF_APP_ADMIN
              value: "{{ .Values.env.rf_app_admin }}"
            - name: ON_PREMISE
              value: "{{ .Values.env.on_premise | default 0 }}"
          volumeMounts:
            {{- if eq .Values.env.rf_debug true }}
            {{ if eq .Values.env.deploy_mode  "STANDALONE" }}
            - name: code
              mountPath: "/root/rapidfort"
            {{ end }}
            {{ end }}
            {{ if .Values.volumeMounts }}
            {{ tpl (toYaml (index .Values.volumeMounts )) . | nindent 12 }}
            {{ end }}          
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            periodSeconds: 30
            initialDelaySeconds: 15
            timeoutSeconds: 10
            httpGet:
              path: /
              port: http
          readinessProbe:
            periodSeconds: 30
            initialDelaySeconds: 15
            timeoutSeconds: 10
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}