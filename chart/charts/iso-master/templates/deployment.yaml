apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "iso-master.fullname" . }}
  labels:
    {{- include "iso-master.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "iso-master.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "iso-master.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "iso-master.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: rfstub-alp-base
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag | default .Chart.AppVersion }}"
          command: ['sh', '-c', "echo loaded {{ .Values.initContainer.image.repository }}"]
      volumes:
        - name: fuse
          hostPath:
            path: /dev/fuse
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
        - name: imgs-work-dir
          hostPath:
            path: /imgs-work-dir
            type: DirectoryOrCreate
        - name: package-analyzer-db-pvc
          persistentVolumeClaim:
            claimName: "{{ .Values.pvc.package_analyzer_db }}"
        - name: image-db-pvc
          persistentVolumeClaim:
            claimName: "{{ .Values.pvc.image_db }}"
        - name: vulns-db
          hostPath:
            path: /opt/rapidfort/data/iso-master/vulns_db
        - name: env
          configMap:
            name: rf-version-info
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http
          readinessProbe:
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http
          env:
            - name: RF_DEBUG
              value: "{{ .Values.env.debug }}"
            #start: Tunneling stub env vars
            - name: AMI_IMAGE_ID
              value: "{{ .Values.env.ami_image_id }}"
            - value: KEYPAIR_NAME
              name: "rf-iso-worker-1.0"
            - name: VMPOOL_APP_PORT
              value: "{{ .Values.env.vm_scheduler_port }}"
            - name: VMPOOL_SERVER_ADDR
              value: "{{ .Values.env.vm_server_addr }}"
            - name: SECGROUP_ID
              value: "{{ .Values.env.security_group_id }}"
            - name: VPC_SUBNET_ID
              value: "{{ .Values.env.vpc_subnet_id }}"
            #end
            - name: KEYCLOAK_REALM
              value: "{{ .Values.env.keycloak_realm }}"
            - name: KEYCLOAK_CLIENT_ID
              value: "{{ .Values.env.keycloak_client_id }}"
            - name: KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
              value: "{{ .Values.env.keycloak_service_account_client_id }}"
            {{- if .Values.env.control_plane_host }}
            - name: "RF_APP_HOST"
              value: "{{ .Values.env.control_plane_host }}"
            {{- else }}
            - name: "RF_APP_HOST"
              value: "{{ .Values.env.rf_app_host }}"
            {{- end }}
            {{- if .Values.env.data_plane_host }}
            - name: "DATA_PLANE_HOST"
              value: "{{ .Values.env.data_plane_host }}"
            {{- else }}
            - name: "DATA_PLANE_HOST"
              value: "{{ .Values.env.rf_app_host }}"
            {{- end }}
            {{- if .Values.secretName }}
            - name: "STS_ACCESS_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: STS_ACCESS_ID
            - name: "AWS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: AWS_ACCESS_KEY_ID
            - name: "AWS_DEFAULT_REGION"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: AWS_DEFAULT_REGION
            - name: "AWS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: AWS_SECRET_ACCESS_KEY
            - name: "STS_ROLE_ARN"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: STS_ROLE_ARN
            - name: "STS_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName }}
                  key: STS_SECRET_KEY
            {{- else }}
            - name: RF_ROLE_ARN
              value: "{{ .Values.env.rf_role_arn }}"
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.env.aws_default_region }}
            {{- end }}
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: rf-connection
                  key: DB_URL
            - name: KEYCLOAK_JWT_PUB_KEY
              valueFrom:
                secretKeyRef:
                  name: rf-connection
                  key: JWT_PUB_KEY
            - name: KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET 
              valueFrom:
                secretKeyRef:
                  name: rf-connection
                  key: KC_CLIENT_SECRET
            - name: RF_S3_BUCKET_NAME
              value:  "{{ .Values.env.s3bucket }}"
            - name: S3_BUCKET_NAME
              value:  "{{ .Values.env.s3bucket }}"
            - name: RF_IMGDB_REDIS_HOST_NAME
              value: "{{ .Values.env.redis_host }}"
            - name: RF_PKGDB_REDIS_HOST_NAME
              value: "{{ .Values.env.redis_host }}"
            - name: "BACKEND_SERVICE_NAME"
              value: "{{ .Values.env.backend_service_name}}"
            - name: DEPLOY_MODE
              value: "{{ .Values.env.deployment_mode }}"
            - name: AUTH_SERVER_ROOT_URL
              value: "{{ .Values.env.auth_server_base_url }}"
            - name: RF_RFVDB_REDIS_HOST_NAME
              value: "{{ .Values.env.vul_redis_host }}"                     
            - name: RF_RFVDB_REDIS_PORT
              value: "{{ .Values.env.vul_redis_port }}"
            - name: RF_RFVDB_REDIS_PWD
              value: "{{ .Values.env.vul_redis_password }}"
            - name: RF_RFVDB_REDIS_DB
              value: "{{ .Values.env.vul_redis_db }}"
            - name: DEFAULT_STUB_TYPE
              value: "monitoring"
            - name: BACKEND_SERVICE_NAME
              value: "backend"
            - name: BACKEND_APP_PORT
              value: "80"
          volumeMounts:
            - name: fuse
              mountPath: "/dev/fuse"
            - name: dockersock
              mountPath: "/var/run/docker.sock"
            - name: imgs-work-dir
              mountPath: "/opt/rapidfort/iso-master/app/imgs_work_dir"
            - name: package-analyzer-db-pvc
              mountPath: "/opt/rapidfort/iso-master/app/package-analyzer-db"
            - name: image-db-pvc
              mountPath: "/opt/rapidfort/iso-master/app/image_db"
            - name: vulns-db
              mountPath: "/opt/rapidfort/iso-master/app/db"
            - name: env
              mountPath: "/opt/rapidfort/.env"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

