apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "runner.fullname" . }}
  labels:
    {{- include "runner.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "runner.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "runner.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "runner.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- if .Values.env.rf_debug }}
        - name: code
          hostPath:
            path: /root/rapidfort
        {{ end }}
        - name: rf-data
          hostPath:
            path: /opt/rapidfort/data/.rapidfort
        - name: env
          hostPath:
            path: /opt/rapidfort/data/.env
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if eq .Values.env.rf_debug  true }}
          workingDir: /root/rapidfort/standalone/runner
          command: ["/bin/sh", "-c", "sleep infinity"]
          {{ end }}
          env:
            #inject create values as env variable.
            {{ if .Values.secret.name }}
            {{- $secretName := .Values.secret.name }}
            {{- range .Values.secret.keys }}
            - name: {{ . | quote}}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ . | quote}}
            {{- end }}
            {{ end }}
            {{ if .Values.rf_role_arn }}
            - name: RF_ROLE_ARN
              value: "{{ .Values.env.rf_role_arn }}"
            {{ end }}
            - name: RF_DEBUG
              value: "{{ .Values.env.rf_debug }}"
            - name: RF_REDIS_HOST_NAME_HA
              value: "{{ .Values.env.redis_host_ha }}"
            - name: RF_REDIS_PORT_HA
              value: "{{ .Values.env.redis_port_ha }}"
            - name: RF_REDIS_PWD_HA
              value: "{{ .Values.env.redis_pwd_ha }}"
            - name: RF_REDIS_DB_HA
              value: "{{ .Values.env.redis_db_ha }}"
            - name: RF_REDIS_HOST_NAME
              value: "{{ .Values.env.redis_host }}"
            - name: RF_REDIS_PORT
              value: "{{ .Values.env.redis_port }}"
            - name: RF_REDIS_PWD
              value: "{{ .Values.env.redis_pwd }}"
          volumeMounts:
            {{- if .Values.env.rf_debug }}
            - name: code
              mountPath: "/root/rapidfort"
            {{ end }}
            - name: rf-data
              mountPath: "/root/.rapidfort"
            - name: env
              mountPath: "/opt/rapidfort/.env"
            - name: dockersock
              mountPath: "/var/run/docker.sock"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 120
            periodSeconds: 2
          livenessProbe:
            {{- if eq .Values.env.rf_debug true }}
            exec:
              command:
              - /bin/true
            {{ else }}
            httpGet:
              path: /
              port: http
            {{ end }}
          readinessProbe:
            {{- if eq .Values.env.rf_debug true }}
            exec:
              command:
              - /bin/true
            {{ else }}
            httpGet:
              path: /
              port: http
            {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag | default .Chart.AppVersion }}"
        command:
          - "/bin/bash"
          - "-c"
          - "until [ $(curl -sw '%{http_code}' http://backend -o /dev/null) -eq 200 ]; do echo backend not ready; sleep 1; done"
