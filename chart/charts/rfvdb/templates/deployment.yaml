apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rfvdb.fullname" . }}
  labels:
    {{- include "rfvdb.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "rfvdb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "rfvdb.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "rfvdb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{ if eq .Values.env.rf_debug  true }}
        - name: code
          hostPath:
            path: /root/rapidfort
        {{ end }}
        - name: vuln-data
          hostPath:
            path: /opt/rapidfort/data/vulns_db
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if eq .Values.env.rf_debug  true }}
          workingDir: /root/rapidfort/rfvdb
          command: ["/bin/sh", "-c", "sleep infinity"]
          {{ end }}
          volumeMounts:
            {{- if eq .Values.env.rf_debug true }}
            - name: code
              mountPath: "/root/rapidfort"
            {{ end }}
            - name: vuln-data
              mountPath: "/root/.cache/vuln-list-update"
          env:
            - name: "RF_DEBUG"
              valueFrom:
                secretKeyRef:
                  name: test
                  key: RF_DEBUG
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.env.aws_access_key_id }}"
            - name: AWS_ACCESS_SECRET_KEY
              value: "{{ .Values.env.aws_access_key_secret }}"
            - name: AWS_DEFAULT_REGION
              value: "{{ .Values.env.aaws_default_region }}"
            - name: "RF_RFVDB_REDIS_HOST_NAME"
              value: "{{ .Values.env.rf_rfvdb_redis_host }}"
            - name: "RF_RFVDB_REDIS_DB"
              value: "4"
            - name: "RF_RFVDB_REDIS_PORT"
              value: "{{ .Values.env.rf_rfvdb_redis_port }}"
            - name: "RF_PKGDB_REDIS_HOST_NAME"
              value: "{{ .Values.env.rf_pkgdb_redis_host }}"
            - name: "RF_IMGDB_REDIS_HOST_NAME"
              value: "{{ .Values.env.rf_pkgdb_redis_host }}"                                                            
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            {{- if eq .Values.env.rf_debug true }}
            exec:
              command:
              - /bin/true
            {{ else }}
            httpGet:
              path: /
              port: http
            {{ end }}
          readinessProbe:
            {{- if eq .Values.env.rf_debug true }}
            exec:
              command:
              - /bin/true
            {{ else }}
            httpGet:
              path: /
              port: http
            {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag | default .Chart.AppVersion }}"
        command:
          - "/bin/bash"
          - "-c"
          - "until [ $(redis-cli -h redis ping) == 'PONG' ]; do echo redis not ready; sleep 1; done"
