secret:
  aws_access_key_id: ""
  aws_secret_access_key: ""
  aws_default_region: ""
  s3_bucket: ""
  rf_app_admin: ""
  rf_app_admin_passwd: ""
  rf_app_host: "" # This field is used to provide the rapidfort service FQDN (if FQDN is not available use IP ADDRESS) to internal service

global:
  rf_app_host: "" # This field is used to update the host name in the ingress.

sc:
  enabled: false

ingress:
  enabled: true

aggregator:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/aggregator-exe"
    tag: "1.1.8-rfhardened"
  initContainers:
    volumePermissions:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
  env:
    redis_host: redis-master

backend:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/backend-exe"
    tag: "1.1.8-rfhardened"
  initContainers:
    volumePermissions:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
    init:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
  env:
    redis_host: redis-master

frontrow:
  enabled: true
  authUrl: ""
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/frontrow"
    tag: "1.1.8-rfhardened"

iso-master:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/iso-master-exe"
    tag: "1.1.8-rfhardened"
  env:
    redis_host: redis-master
    redis_host_ha: redis-master

keycloak:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/keycloak"
    tag: 16.1.1
  initContainers:
    init_mysql:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"

mysql:
  # Set 'enabled' to true if you want to deploy a local (in-cluster) mysql instance
  enabled: true
  # To use an external mysql instance, set enabled to false and uncomment
  # the line below:
  # mysqlServer: ""
  # Seeding database required on intial run. Set to false if conducting a new install with existing data
  seedDatabase: true
  # ensure this is also set in the keycloak db.addr value

  # To use an external secret for the password for an external mysql
  # instance, set enabled to false and provide the name of the secret on the
  # line below:
  # existingSecret: ""
  # existingSecretPasswordKey: "mysql-password"
  image:
    registry: registry1.dso.mil/ironbank
    repository: opensource/mysql/mysql8
    tag: 8.0.28

    pullSecrets:
      - private-registry
  initdbScriptsConfigMap: "init-db-configuration"
  fullnameOverride: "mysql"
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: "mysql"
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: standalone
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: "mysql"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: "mysql"
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: ""
  primary:
    ## @param primary.args [array] Override default container args on MySQL Primary container(s) (useful when using custom images)
    ## Modification: RF needs specific auth type(?)
    ##
    args: ["--default-authentication-plugin=mysql_native_password"]

redis:
  enabled: true
  istio:
    enabled: true
  architecture: standalone
  fullnameOverride: "redis"
  auth:
    enabled: false

rf-scan:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/rf-scan-exe"
    tag: "1.1.8-rfhardened"
  initContainers:
    volumePermissions:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
  env:
    redis_host: redis-master
    redis_host_ha: redis-master

rfapi:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/rfapi-exe"
    tag: "1.1.8-rfhardened"
  initContainers:
    init:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
  env:
    redis_host: redis-master

rfpubsub:
  enabled: true
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/rfpubsub-exe"
    tag: "1.1.8-rfhardened"
  env:
    redis_host: redis-master
    redis_host_ha: redis-master

runner:
  enabled: false
  image:
    repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/runner"
    tag: "1.1.8-rfhardened"
  initContainers:
    init:
      image:
        repository: "registry.dso.mil/platform-one/big-bang/apps/third-party/rapidfort/init"
  env:
    redis_host: redis-master
    redis_host_ha: redis-master

logger:
  enabled: false

# Big Bang Values
domain: bigbang.dev
istio:
  enabled: false
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    # PERMISSIVE is required for any action which redeploys pods because STRICT interferes with initContainers
    # Can be changed to STRICT after all initContainers have finished but will interfere with upgrades/pod deployments that have initContainers
    mode: PERMISSIVE
  rapidfort:
    enabled: true
    gateways:
    - istio-system/public
    hosts:
    - rapidfort.{{ .Values.domain }}

networkPolicies:
  enabled: false
  ingressLabels: 
    app: istio-ingressgateway
    istio: ingressgateway

# Bigbang helm test values - default disabled
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      # dummy values for now
      # cypress_url: 'http://{{ template "rapidfort.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
      cypress_url: 'http://test.test'
  scripts:
    envs:
      URL: 'http://test.test'
      # URL: 'http://{{ template "rapidfort.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
