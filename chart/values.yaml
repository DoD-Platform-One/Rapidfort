#
# init user data
#
global:
  admin: "admin@example.com" # this should be replaced with actual email address
  passwd: "P@ssw0rd!" # this should be replaced with actual password
  hostname: "test.example.com" # this should hostname where rapidfort is deployed and availabe to conenct via https
  cloud: "eks"
  type: ""
  communityservice:
    enabled: false
  imagePullSecrets:
    - name: private-registry
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt
    tls: []
    # secretName: rapidfort-tls-cert
  aws:
    aws_access_key_id: ""
    aws_secret_access_key: ""
    region: us-east-1
    storage: rapidfort-bucket
#Rapidfort Service Account
serviceAccount:
  create: true
storageClass:
  create: true
  name: "rf-storage-rw"

db:
  auth:
    username: "root"
    password: "RF-123579"
    port: "3306"
    host: "mysql"
    db_name: "standalone" # please contact RapidFort if you need to change this Database Name.
  # this is only used when connecting to external MySQL DB with SSL
  ssl:
    enabled: true
    secretName: rapidfort-db-certs
    certFile: |
      -----BEGIN CERTIFICATE-----
      MIIEBzCCAu+gAwIBAgIRAMSbo6rMlQ+TZDCb7zg40qUwDQYJKoZIhvcNAQEMBQAw
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0xIFJvb3QgQ0EgUlNBMjA0OCBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTAgFw0yMjA0MTUyMjM1MjFaGA8yMDYyMDQxNTIzMzUyMVow
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0xIFJvb3QgQ0EgUlNBMjA0OCBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM3U
      XJp6XLyNdOmyuj19ZKNmbJTGoRbsnrdxYLxbhQRCykOga7Hh/D5qKPMR/B80OsoK
      uWpxWmQCaCP4Z9Aa9N68L0TRJXZoArZjV8q5nfjsYWQqOPx+cKtIxqvyotov5WE2
      RKaujqpKBAyI49542NNmOEROUshunxYh/7s3Z8oPxOX8kp6hLBtckqUzFbAb7/vM
      X0YpgNUpJ2G1Q9MLKfxEmw2p0WE1FEW35gMvUN4jFtTaKjsXtqGu6iF4YqEASwrv
      vPmLhBHuyKC9ZfEvYzFjw2+l5SMENvhAde10WUpBuJnK+ZoKgFxLOUcdyZO9fR1Y
      wVG5twjPnOhHUOLpAP0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
      FgQUsjcnO96t1VCa/JBZSqY1asXWaZ4wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3
      DQEBDAUAA4IBAQCYx0FHyvrX1CeuKd4CEi50QUZzY1HjGoySz+by6rY1+jZ1v2cp
      JIBrhQ8VUiJ8EqCDKzzv1mBOA1lx+5jpWB2yKP2hq3YJ93BNK+KO7BgasCkUYLGk
      v3c2jo4J5qbWsNsqa/dog+qQbLAcqCx4MeZIadpdLv++ejGPjA0+zjXWwWmQ4RKe
      ILiR1wO52uKF90tiDTNi3C5oMaEYbW+Kbsfsx5NpybEU7DkrVKb4MTVgtFuAELrF
      8Zmdbpv8xnUA+oo/QdLLX+eJP/+8tdeDdB6rYFKpJmC2B3EnaKS4X4UpxZJFAgig
      oB6q5jNJ5onkWIfx8luNdbagKSFZXHhSO8KP
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIGBzCCA++gAwIBAgIRAOzQCoOR21YG2noWOfFcuNIwDQYJKoZIhvcNAQEMBQAw
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0xIFJvb3QgQ0EgUlNBNDA5NiBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTAgFw0yMTA1MjYyMTQ0MzlaGA8yMTIxMDUyNjIyNDQzOVow
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0xIFJvb3QgQ0EgUlNBNDA5NiBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANwY
      M2iZdnnlMutI9nfn2fWBICAQHWmMmpPmtSka/ziBFyaCxkHDF8RLmooW+GLe+FEF
      9CQKSVqRa7X5AFiqRFF1KvgxWvazawyScuw88JW6Eqhaw0Rlm2p1Iow3TE8FSCDo
      Is1vEV3Brbf26CMiXbqI+aCuTOy0fjRzjl5igViTgZxt2ZXOwyKkF+2T8LQp4b4F
      Mh85Ctw1An1DhAemsc3SmcYnPKyFUP90DxGuTjFtfNR01GbBtVYwVvOBgIJe59Zs
      OWcEFOO2mU53Ik6oKcLYu4+PmE5aDvQewb6bkQZchClb7Eg0BPYekWwTPsKUTS3H
      bgdwVxgzjdAdU9fvaaoQmS9xdHWlonKq8CubJdLUduV3WVmDAg7MQgiT3p8JF9W2
      KbQpUbYxqd7j9OIe3IS3rVPwYA8PVh1hUJ+OBLw61sbGRAuN3H+B1DlJh1smg6bR
      g9W+oLRzfjZa32EzFmaQIxtgRfiyjxB/vqAHdl5zPou30X1CyRYquS870O02bvTN
      zzWSOfRY4KPmS1YFVsN+m+R4+hSUOAE//bJ25ACP9oDO5w9NWkAux4e0UUAuWCra
      jRROYN2J0KCogdru5G7lOQerD12zi3C2iibty6ou4tQX+MIKMMUVq8cfUH7oKv/R
      8mL5PV/NUsgO248llo0lr9QBwQKdiw17wCxFR+8vAgMBAAGjQjBAMA8GA1UdEwEB
      /wQFMAMBAf8wHQYDVR0OBBYEFPDYnx2xYIPDDAEjb6UcF29I6DgKMA4GA1UdDwEB
      /wQEAwIBhjANBgkqhkiG9w0BAQwFAAOCAgEANTrAGs/GpXCADAwMGlrjXTdohp+p
      CIp3gbnryVYZBXvO+f8hjJ8bHk0D/DiBrkjE8o0IpNaAadOZa+WvTNMsanPmGf1A
      kD0vA9nm4gwEhBbzj9HRYX+dIhZhVWny9Kugm80s0h0hvbwTakUPOdMqkz6wn+xx
      Owh7AIwaC5TTCsQyKlv5rjVblvU1XFgBf3Pf3wvMAfjDoAEPTXER/9mLVbXe+EmW
      osP1JmgyDd+0WQFVK/LEDW81L5hsV5JvthAAFhGVtRw9ko5Ep28+EQUJE1wmLTdL
      PyjB/KfJrTMDq94WolzFv4JpUStHbclkKlXtigjKeiYZ5Yvo+vLMSkXemccSfYn7
      vdaUFD5vqWXvM4xhiYRq/tigw2E1bjmyd9L3XD7XalufZtMGWn7zT8HMPP+/Lch1
      JjZ9LL2Y99VIqhoHcuSa95FtLpYDRQ28K03uwqxqFnOQLyPVmYwsaHKnmmwaZDjF
      K1XxLVRLGRWvKEuSoWrsGcs3ehoxX4Knz/BaJzr/ioU1VnItj53tmOSJO0eMA6k+
      egaVEb0FTa2F5xeLCKjgfDDWMz3v0TdL+kt+9z0THMlPWfOzd1C35ZzSIcTcRj22
      SAzsL0t5ZTI4XvoPFF8dga78/KsBRolqdPjs0UzdlKhwh1ADOkTRgLOaaidMEgsT
      JS/rbzD4FPbvc/g=
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIICtDCCAjugAwIBAgIQPyg+edjKVnM2PB4KZVu66jAKBggqhkjOPQQDAzCBmjEL
      MAkGA1UEBhMCVVMxIjAgBgNVBAoMGUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4x
      EzARBgNVBAsMCkFtYXpvbiBSRFMxCzAJBgNVBAgMAldBMTMwMQYDVQQDDCpBbWF6
      b24gUkRTIHVzLWdvdi13ZXN0LTEgUm9vdCBDQSBFQ0MzODQgRzExEDAOBgNVBAcM
      B1NlYXR0bGUwIBcNMjEwNTI2MjE1MzI3WhgPMjEyMTA1MjYyMjUzMjdaMIGaMQsw
      CQYDVQQGEwJVUzEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNlcywgSW5jLjET
      MBEGA1UECwwKQW1hem9uIFJEUzELMAkGA1UECAwCV0ExMzAxBgNVBAMMKkFtYXpv
      biBSRFMgdXMtZ292LXdlc3QtMSBSb290IENBIEVDQzM4NCBHMTEQMA4GA1UEBwwH
      U2VhdHRsZTB2MBAGByqGSM49AgEGBSuBBAAiA2IABFaqyIYrbpPfhiKzLEkmzp1j
      3OYO/e1VE3vCf5c62bN5xYKFKH/MnKgsUFNsFpJ1t0p9cexi+607aiYOo1sOWvOj
      q3PUu+ltklQdvunU/Se5++qqsh7lylL5OF/F19uqfqNCMEAwDwYDVR0TAQH/BAUw
      AwEB/zAdBgNVHQ4EFgQUJHPtPhijPquZxTz2UGh4YV1npYMwDgYDVR0PAQH/BAQD
      AgGGMAoGCCqGSM49BAMDA2cAMGQCMHWDFuIZ9LZgysbL4vx/Ox9z8fbegb3352bM
      BFr6JV1x8VLbePblHd0V1MwDdRWeAwIwarWfOVdB1ijrwzjROzCwE0uBkHYUPr0Z
      vgwdtlsnwDw9TnjsBrTJkQ0aS8c0Ahl1
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIICtjCCAjugAwIBAgIQCojG1Zix0YArC/bBkU7eOjAKBggqhkjOPQQDAzCBmjEL
      MAkGA1UEBhMCVVMxIjAgBgNVBAoMGUFtYXpvbiBXZWIgU2VydmljZXMsIEluYy4x
      EzARBgNVBAsMCkFtYXpvbiBSRFMxCzAJBgNVBAgMAldBMTMwMQYDVQQDDCpBbWF6
      b24gUkRTIHVzLWdvdi1lYXN0LTEgUm9vdCBDQSBFQ0MzODQgRzExEDAOBgNVBAcM
      B1NlYXR0bGUwIBcNMjEwNTI2MjIyODU4WhgPMjEyMTA1MjYyMzI4NThaMIGaMQsw
      CQYDVQQGEwJVUzEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNlcywgSW5jLjET
      MBEGA1UECwwKQW1hem9uIFJEUzELMAkGA1UECAwCV0ExMzAxBgNVBAMMKkFtYXpv
      biBSRFMgdXMtZ292LWVhc3QtMSBSb290IENBIEVDQzM4NCBHMTEQMA4GA1UEBwwH
      U2VhdHRsZTB2MBAGByqGSM49AgEGBSuBBAAiA2IABKZfn/XfCIlHTE/YF5lH9D2h
      H71kG3RaC92hBPbyncbDMf2Q7JeYwhknKahWmSO/EP0Nj+9iCFimT/Jb9o9ykkKl
      gOvv/M6SQAuKsC/24PxwC8QV1miuTMUd7fGhNjQUHKNCMEAwDwYDVR0TAQH/BAUw
      AwEB/zAdBgNVHQ4EFgQUniTlDl2igVgummx44YNMd5t4mMgwDgYDVR0PAQH/BAQD
      AgGGMAoGCCqGSM49BAMDA2kAMGYCMQCSb8X09cnFdS90i1nqRLhancNU8bCFoI86
      hqyctq0ftvXXmEe0bA+JnpIm5p/UKUUCMQCYYYQFfkeZtD4SOxSIE+WzfghJFaAq
      /s17Q6LU2tCl4/csuzsTAl/vCc0JVynH340=
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      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
      JFiKTJMbfPV2uQ==
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIEBzCCAu+gAwIBAgIRAOYJ9HCNT4ONuUhBhtQkCWowDQYJKoZIhvcNAQEMBQAw
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3YtZWFzdC0xIFJvb3QgQ0EgUlNBMjA0OCBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTAgFw0yMjA0MTUyMzE0NDlaGA8yMDYyMDQxNjAwMTQ0OVow
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3YtZWFzdC0xIFJvb3QgQ0EgUlNBMjA0OCBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANwz
      j5S2lfJdNxNGf4zrSXUR+23coWdO6oXUJgkj0c8DZnnLer/4dAa2Aah9wsq/TxmJ
      YgzBganNQEghy1ru0GqA7R/NYePXqikTPfVgcNrVRBzPA69/C0bHT+/3XGYkPrxP
      HNER5ctaLhgu4zkF9DI6m9ajPbEV/6nZMKYczhaigqW7Ff/eq3TKtisZLj8KrDYd
      gswBTLgil5GV+CGdmlb32fCpBrTnrXyqUe/WANv0hTD4IZ/+caUVjAaiSLYiMNMw
      +oO1872rtK4kjF4U2TOzkOl4kbvvuhSOA+qDUBUwf0HmJc4+Y6/cRBsqbxJ4R21G
      Tpj/XOc+aoU+lgvDGcsCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E
      FgQUvFFLeSz7XHbjkKaCFM2LQlOEQO4wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3
      DQEBDAUAA4IBAQCd4a9nrcjbtCZFGV5RzJUzSw/oDIJVKYMicehsecZLgVY+DwiC
      l2IuaPZWu3YpjXerWz7BPBJUhx43u4Bi+yWWrnz+i0porH6jrCGrfi8uou3TRwni
      BcRvq3v8vJZ23HY6NGbVdrtqD2g2lWRFqwRJXxs+uueqfLlS40uahVyJgldfbWfE
      AetbBBycjgaj4MPVURdylqXpl8dIhUIwHs3k4gFsAmzwF7hg+HzpDlCY/1TLCp0B
      k88UItrPSHCAVAefPk5PhjwLC7MDE3ZBJQxdT4R1nXuEEoFaqqxL81RLcqpUI6PU
      4Nv4+7bXbAfksPVRtf4bOoVLH7HOm7WJdRym
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIEKTCCAxGgAwIBAgIRAJBTikKsddbtojh66kNQyDswDQYJKoZIhvcNAQEMBQAw
      gZsxCzAJBgNVBAYTAlVTMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJ
      bmMuMRMwEQYDVQQLDApBbWF6b24gUkRTMQswCQYDVQQIDAJXQTE0MDIGA1UEAwwr
      QW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0xIFJvb3QgQ0EgUlNBMjA0OCBHMTEQMA4G
      A1UEBwwHU2VhdHRsZTAeFw0yMjA0MjAyMDQ4MTBaFw0yNzA0MjAyMTQ4MTBaMIGb
      MQswCQYDVQQGEwJVUzEQMA4GA1UEBwwHU2VhdHRsZTETMBEGA1UECAwKV2FzaGlu
      Z3RvbjEiMCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNlcywgSW5jLjETMBEGA1UE
      CwwKQW1hem9uIFJEUzEsMCoGA1UEAwwjQW1hem9uIFJEUyB1cy1nb3Ytd2VzdC0x
      IFJTQTIwNDggRzEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQColzcV
      Jy1vtwdIh0BQeyDbOWSkamCA+8MiwLowGu0dHAPS6RU+YCRmliumrDaSRG3rOIUi
      rLC5RZSQ0lOpLARmJgmPE6Q4JIiroP4P6qh7go3QBCHGgNGsGs4Ho5PfokY6lfVV
      llQk7o2ls/WE25mhVEQ3IHgM7rNK4M/cI837jlsHGbKkkhottPhULIiJayl4DRsS
      eXfWpqoBHld1fKnF8Zd+YDvWh78hNPYxJd0ISKsNJdXDN6SVXEQJxyhVD5qatr4C
      Jc2qmSu4z/Vfa+Q7g7XwfP17raXXAqfHQh/lJuE6yQJ3ye5kTSOvg+ep9yk3WRL6
      W0l4V8J7RnhuAs8hAgMBAAGjZjBkMBIGA1UdEwEB/wQIMAYBAf8CAQAwHwYDVR0j
      BBgwFoAUsjcnO96t1VCa/JBZSqY1asXWaZ4wHQYDVR0OBBYEFI1kGCvQCMzHebse
      L2HCZgQcC+HkMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQwFAAOCAQEAfhGp
      K1tZlHdQxvTDlY2XNeN2ZRSPzvuWbPRDgV/2MKLMpyrSpVeyfCYl8yUix3Cn5kCj
      U9p23JnLmSS4ofSzRhHQq6+kWNkT4Q18pd1Epohr4a1FXV8CXAbFJpq0K7yKyeSx
      fYEUHcBcihXQeTCTfVvLGiAzpOfifag36bLCm59FNqxA18xWBgz8lYHRoy59KWrl
      PCipRMVZEAWorHiI7a38QrelPW06a0oBNojFmAVokEgkjzP4ihVTNCymLPhRG8GC
      iiRN0u+I8cyKjLz8hnviKXkJpgewcMJeFUivKCYEu0R7K5Oc4unSyu0uhz4I+yYL
      3cN5BjDt6Dzd7DM4vQ==
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      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
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIEKDCCAxCgAwIBAgIQaC/DN4ySdcKe6GO0sGy0UTANBgkqhkiG9w0BAQwFADCB
      mzELMAkGA1UEBhMCVVMxIjAgBgNVBAoMGUFtYXpvbiBXZWIgU2VydmljZXMsIElu
      Yy4xEzARBgNVBAsMCkFtYXpvbiBSRFMxCzAJBgNVBAgMAldBMTQwMgYDVQQDDCtB
      bWF6b24gUkRTIHVzLWdvdi1lYXN0LTEgUm9vdCBDQSBSU0EyMDQ4IEcxMRAwDgYD
      VQQHDAdTZWF0dGxlMB4XDTIyMDQyMDE5MjEyNloXDTI3MDQyMDIwMjEyNlowgZsx
      CzAJBgNVBAYTAlVTMRAwDgYDVQQHDAdTZWF0dGxlMRMwEQYDVQQIDApXYXNoaW5n
      dG9uMSIwIAYDVQQKDBlBbWF6b24gV2ViIFNlcnZpY2VzLCBJbmMuMRMwEQYDVQQL
      DApBbWF6b24gUkRTMSwwKgYDVQQDDCNBbWF6b24gUkRTIHVzLWdvdi1lYXN0LTEg
      UlNBMjA0OCBHMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANBmYrBC
      7lik4c1tB2MSsc43/Qr0xCfmz2j7e2J93pGKohtfttGZ5E0VOy2uUJoLt624/Mnj
      5c+XFqMVblAoq4PBw3MuNIOBiA663hAqvj0JJG8FV3CgQ459D3liBY/3zCVEdWsu
      LxigOiXJUFY5ve0PXo3uQjzmfZtDUJqUCS7kGx7zXuo8MGd5RoqS+O52i/t7uoJz
      dbufzw/h1SBwcmB3qyZBW9j0wR/d7Hp7UgP3Dp5oyo7+yP7QNiIpj5U8Wi8CZAoe
      rGBTp70A3LdTuD8xCFcSVgNEoFIZspfj5QBkbxqydhMG2z57PUF83K+AZET4IUdN
      SX/+xteRlLCjhUUCAwEAAaNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBADAfBgNVHSME
      GDAWgBS8UUt5LPtcduOQpoIUzYtCU4RA7jAdBgNVHQ4EFgQUXUiCehbDGqpot4A6
      AhrG+Qb3UYgwDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBDAUAA4IBAQAwwFi4
      7WlTUfMccehtJSq7TUZd1wRzJkqhY1Y9KjbJCvqiSSJ3VlCtMAbYf3PUKba7LLwl
      alfhr9DqJfo1R3CNKnWXtNtDzeZ7i60aTP6MQ5BdfQhd99FcmHrMqwN45js0paTl
      2L0hHK346K1dcT82MW5Xk9/oUVFMnNRKT/52g77J+qwZkHDol0k1X59bB7oFH6E/
      B8WCnDwhzPlfiUUmVAcZpoR2C53JWCbTv0U2FBLjVaVXUdqZ8byC8sB6aw7Y8tH7
      +PXMAGpLrenHkp+ozeTLtnmGbtDGFSlRkJU+Zw0i2CtPaoo541Q2BVZjipTl1Tir
      F9yG3bosMKACSbYb
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      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
      -----END CERTIFICATE-----

#
# aggregator
#
aggregator:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/aggregator-exe:1.1.0-348714f-1250973506-rfhardened-DoD
  ports: {}
  ephemeralVolumeClaimTemplates:
    - name: aggregator-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
    - name: aggregator-data-local-bucket
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: aggregator-data
      mountPath: /mnt/raid/aggregator
    - name: aggregator-data-local-bucket
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  podSecurityContext:
    fsGroup: 1000
  containerSecurityContext: {}
  service: {}
  ingress: {}
  resources:
    limits:
      cpu: "2000m"
      memory: "4096Mi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  envVars:
    RF_API_SERVER: iso-master
    RF_DEBUG: "no"
  envVarsSecret:
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_GS_CREDS
    - RF_ROLE_ARN
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# backend
#
backend:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/backend-exe:1.1.0-cd60bda4-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: backend-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 128Gi
  volumes: []
  volumeMounts:
    - name: backend-data
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippet: |
        gzip on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)"
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 5;
        gzip_min_length 512;
        gzip_buffers 16 128k;
        gzip_http_version 1.0;
        gzip_types application/json;
    hosts:
      - host:
        paths:
          - path: /api/v1/
            pathType: Prefix
  resources:
    limits:
      cpu: "2000m"
      memory: "4096Mi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  envVars:
    AUTH_SERVER_ROOT_URL: http://keycloak
    LC_ALL: en_US.UTF-8
    QUAY_ENABLED_RF_APP_HOST: "preprod.azure.rapidfort.io us01.rapidfort.com" # this enables rf deployment with rf_app_host in list to create robot account on quay
  envVarsSecret:
    - RF_APP_HOST
    - DB_URL
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_APP_ADMIN
    - RF_APP_ADMIN_PASSWD
    - RF_STORAGE_TYPE
    - RF_S3_BUCKET
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - QUAY_TOKEN
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# files-redis
#
filesredis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "256Gi"
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/files-redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/files-redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources:
    limits:
      cpu: "2"
      memory: "6144Mi"
    requests:
      cpu: "1"
      memory: "2048Mi"
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# fileupload
#
fileupload:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/fileupload:1.1.0-d960c2b-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: fileupload-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: fileupload-data
      mountPath: /opt/rapidfort/local-bucket
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-body-size: 10240m
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    hosts:
      - host:
        paths:
          - path: /upload
            pathType: Exact
          - path: /download
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - DB_URL
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - AWS_DEFAULT_REGION
    - AWS_ACCESS_KEY_ID
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - AWS_SECRET_ACCESS_KEY
    - RF_VERBOSE
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 99
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 99
#
# frontrow
#
frontrow:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/frontrow:1.1.0-6c481f07-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host:
        paths:
          - path: /
            pathType: Prefix
          - path: /cli
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - RF_APP_HOST
    - DEPLOY_MODE
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# iso-master
#
isomaster:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/iso-master-exe:1.1.0-cd9e024-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  serviceAccount: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  # privileged: true
  # capabilities:
  #   add: ["SYS_ADMIN"]
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    hosts:
      - host:
        paths:
          - path: /iso-master/
            pathType: Prefix
  resources: {}
  envVars:
    LC_ALL: en_US.UTF-8
  envVarsSecret:
    - DB_URL
    - AWS_DEFAULT_REGION
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# keycloak
#
keycloak:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/rapidfort/keycloak:24.0.1
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    enabled: false
    className: ""
    annotations:
    hosts:
      - host:
        paths:
          - path: /auth/
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - JDBC_DB_URL
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /auth/health/live
      port: 8080
    failureThreshold: 99
  readinessProbe:
    httpGet:
      path: /auth/health/ready
      port: 8080
    failureThreshold: 99
#
# lock-redis
#
lockredis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "64Gi"
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/lock-redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/lock-redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources: {}
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# mysql
#
mysql:
  enabled: false
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/mysql8:8.0.29-debian-10-r37
  ports:
    - name: mysql
      containerPort: 3306
  volumes:
    - name: mysql-initdb
      configMap:
        name: mysql-initdb-config
  volumeMounts:
    - name: mysql-data
      mountPath: /bitnami/mysql/data
    - name: mysql-initdb
      mountPath: /docker-entrypoint-initdb.d
  volumeClaimTemplates:
    - name: "mysql-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "256Gi"
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/mysql"]
      volumeMounts:
        - name: mysql-data
          mountPath: /opt/rapidfort/local-bucket/data/mysql
  podSecurityContext: {}
  containerSecurityContext: {}
  ingress: {}
  resources: {}
  envVars:
    MYSQL_DATABASE: keycloak
    MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command:
        - "mysql"
        - "-h"
        - "localhost"
        - "-u"
        - "{{ .Values.db.auth.username }}"
        - "-p{{ .Values.db.auth.password }}"
        - "-e"
        - "SHOW DATABASES;"
    failureThreshold: 10
  readinessProbe:
    exec:
      command:
        - "mysql"
        - "-h"
        - "localhost"
        - "-u"
        - "{{ .Values.db.auth.username }}"
        - "-p{{ .Values.db.auth.password }}"
        - "-e"
        - "SHOW DATABASES;"
    failureThreshold: 10
#
# redis
#
redis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "128Gi"
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources:
    limits:
      cpu: "2"
      memory: "6144Mi"
    requests:
      cpu: "1"
      memory: "2048Mi"
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# rf-scan
#
rfscan:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rf-scan-exe:1.1.0-cd9e024-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  serviceAccount: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    hosts:
      - host:
        paths:
          - path: /rf-scan/
            pathType: Prefix
  resources: {}
  envVars:
    LC_ALL: en_US.UTF-8
  envVarsSecret:
    - AWS_DEFAULT_REGION
    - DB_URL
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_REALM
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# rfapi
#
rfapi:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rfapi-exe:1.1.0-6ed7411-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  service:
    port: 80
    targetPort: 8080
  ingress:
    ingressClassName: ""
    http:
      annotations:
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      hosts:
        - host:
          paths:
            - path: /rfapi/
              pathType: Prefix
    websocket:
      annotations:
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_set_header Upgrade "websocket";
          proxy_set_header Connection "Upgrade";
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/server-snippets: |
          location /rfapi/events {
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
          }
      hosts:
        - host:
          paths:
            - path: /rfapi/events
              pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# rfpubsub
#
rfpubsub:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rfpubsub-exe:1.1.0-2467ae6-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header Upgrade "websocket";
        proxy_set_header Connection "Upgrade";
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippets: |
        location /rfpubsub/events {
          proxy_set_header X-Forwarded-Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host $host;
        }
    hosts:
      - host:
        paths:
          - path: /rfpubsub
            pathType: Prefix
  resources: {}
  envVars:
    RFPUBSUB_WS_PORT: 8080
    API_KEY: 03f4b34739f506f88c9bbc3410b5d070
    RF_API_SERVER: iso-master
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# runner
#
runner:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/runner:1.1.0-e237cbe-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: var-lib-containers
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
    - name: var-lib-containers
      mountPath: /var/lib/containers
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  # privileged: true
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
    hosts:
      - host:
        paths:
          - path: /runner/
            pathType: Prefix
  resources: {}
  envVars:
    RFVDB_HOST: frontrow.rapidfort.com
    RF_CONTAINER_ENGINE: podman
    RF_INTERNAL: 1
    RF_DEBUG: no
  envVarsSecret:
    - RF_APP_HOST
    - DB_URL
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_APP_ADMIN
    - RF_APP_ADMIN_PASSWD
    - RF_STORAGE_TYPE
    - RF_S3_BUCKET
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - KEYCLOAK_JWT_PUB_KEY
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# rfvdb
#
rfvdb:
  enabled: false
  replicaCount: 1
  image: registry1.dso.mil/ironbank/rapidfort/rfvdb:1.1.45-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "1250m"
    hosts:
      - host:
        paths:
          - path: /rfvdb/
            pathType: Prefix
  resources: {}
  envVars:
    RF_DEBUG: "no"
    RF_RFVDB_PORT: "8080"
  envVarsSecret:
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_GS_CREDS
    - RF_ROLE_ARN
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# vulns-db
#
vulnsdb:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/vulns-db:1.1.0-8730339-1250973506-rfhardened-DoD
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "250m"
    hosts:
      - host:
        paths:
          - path: /vulns-db/
            pathType: Prefix
  resources:
    limits:
      cpu: "2"
      memory: "4096Mi"
    requests:
      cpu: "1"
      memory: "512Mi"
  envVars:
    RFVDB_HOST: vulndb.rapidfort.com
    RF_DEBUG: no
    REDIS_AOF_ENABLED: no
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
# -- Big Bang Values
domain: bigbang.dev
istio:
  enabled: true
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    # PERMISSIVE is required for any action which redeploys pods because STRICT interferes with initContainers
    # Can be changed to STRICT after all initContainers have finished but will interfere with upgrades/pod deployments that have initContainers
    mode: STRICT
  rapidfort:
    enabled: true
    allowed_rf_host: "us01.rapidfort.com"
    gateways:
      - istio-system/public
    hosts:
      - rapidfort.{{ .Values.domain }}
networkPolicies:
  enabled: true
  ingressLabels:
    app: public-ingressgateway
    istio: ingressgateway
  # -- IP range of api.rapidfort.com
  rapidfortApiIpRange: ""
  # -- test
  controlPlaneCidr: ""
# -- Bigbang helm test values - default disabled
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      # dummy values for now
      # cypress_url: 'http://{{ template "rapidfort-platform.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
      cypress_url: 'http://test.test'
  scripts:
    envs:
      URL: 'http://test.test'
      # URL: 'http://{{ template "rapidfort-platform.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
  addons:
    minio:
      enabled: false
