#
# init user data
#
global:
  admin: "admin@example.com" # this should be replaced with actual email address
  passwd: "P@ssw0rd!" # this should be replaced with actual password
  hostname: "test.example.com" # this should hostname where rapidfort is deployed and availabe to conenct via https
  cloud: "eks"
  type: ""
  communityservice:
    enabled: false
  imagePullSecrets:
    - name: private-registry
  ingress:
    enabled: false
    className: "nginx"
    annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt
    tls: []
    # secretName: rapidfort-tls-cert
  aws:
    aws_access_key_id: ""
    aws_secret_access_key: ""
    region: us-east-1
    storage: rapidfort-bucket
  keycloak_admin: "keycloakAdmin"
  keycloak_admin_passwd: "Dz4HEhDCaEEoDPom"
  keycloak_service_account_client_secret: ""
#Rapidfort Service Account
serviceAccount:
  create: true
storageClass:
  create: true
  name: "rf-storage-rw"
db:
  auth:
    username: "root"
    password: "RF-123579"
    port: "3306"
    host: "mysql"
    db_name: "standalone" # please contact RapidFort if you need to change this Database Name.
  # this is only used when connecting to external MySQL DB with SSL
  ssl:
    enabled: false
    secretName: rapidfort-db-connection-certs
    certFile: ""
#
# aggregator
#
aggregator:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/aggregator-exe:1.1.86-rfhardened
  ports: {}
  ephemeralVolumeClaimTemplates:
    - name: aggregator-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
    - name: aggregator-data-local-bucket
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: aggregator-data
      mountPath: /mnt/raid/aggregator
    - name: aggregator-data-local-bucket
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  podSecurityContext:
    fsGroup: 1000
  containerSecurityContext: {}
  service: {}
  ingress: {}
  resources:
    limits:
      cpu: "2000m"
      memory: "4096Mi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  envVars:
    RF_API_SERVER: iso-master
    RF_DEBUG: "no"
  envVarsSecret:
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_GS_CREDS
    - RF_ROLE_ARN
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# backend
#
backend:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/backend-exe:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: backend-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 128Gi
  volumes: []
  volumeMounts:
    - name: backend-data
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippet: |
        gzip on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)"
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 5;
        gzip_min_length 512;
        gzip_buffers 16 128k;
        gzip_http_version 1.0;
        gzip_types application/json;
    hosts:
      - host:
        paths:
          - path: /api/v1/
            pathType: Prefix
  resources:
    limits:
      cpu: "2000m"
      memory: "4096Mi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  envVars:
    AUTH_SERVER_ROOT_URL: http://keycloak
    LC_ALL: en_US.UTF-8
    QUAY_ENABLED_RF_APP_HOST: "preprod.azure.rapidfort.io us01.rapidfort.com" # this enables rf deployment with rf_app_host in list to create robot account on quay
  envVarsSecret:
    - RF_APP_HOST
    - DB_URL
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_APP_ADMIN
    - RF_APP_ADMIN_PASSWD
    - RF_STORAGE_TYPE
    - RF_S3_BUCKET
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - QUAY_TOKEN
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# files-redis
#
filesredis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "256Gi"
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/files-redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/files-redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources:
    limits:
      cpu: "2"
      memory: "6144Mi"
    requests:
      cpu: "1"
      memory: "2048Mi"
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# fileupload
#
fileupload:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/fileupload:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: fileupload-data
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: fileupload-data
      mountPath: /opt/rapidfort/local-bucket
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-body-size: 10240m
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    hosts:
      - host:
        paths:
          - path: /upload
            pathType: Exact
          - path: /download
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - DB_URL
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - AWS_DEFAULT_REGION
    - AWS_ACCESS_KEY_ID
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - AWS_SECRET_ACCESS_KEY
    - RF_VERBOSE
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 99
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 99
#
# frontrow
#
frontrow:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/frontrow:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host:
        paths:
          - path: /
            pathType: Prefix
          - path: /cli
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - RF_APP_HOST
    - DEPLOY_MODE
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# iso-master
#
isomaster:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/iso-master-exe:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  serviceAccount: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  # privileged: true
  # capabilities:
  #   add: ["SYS_ADMIN"]
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    hosts:
      - host:
        paths:
          - path: /iso-master/
            pathType: Prefix
  resources: {}
  envVars:
    LC_ALL: en_US.UTF-8
  envVarsSecret:
    - DB_URL
    - AWS_DEFAULT_REGION
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_REALM
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# keycloak
#
keycloak:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/rapidfort/keycloak:24.0.1
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    enabled: false
    className: ""
    annotations:
    hosts:
      - host:
        paths:
          - path: /auth/
            pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret:
    - KC_DB_URL
    - KEYCLOAK_ADMIN
    - KEYCLOAK_ADMIN_PASSWORD
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /auth/health/live
      port: 8080
    failureThreshold: 99
  readinessProbe:
    httpGet:
      path: /auth/health/ready
      port: 8080
    failureThreshold: 99
#
# lock-redis
#
lockredis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "64Gi"
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/lock-redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/lock-redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources: {}
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# mysql
#
mysql:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/mysql8:8.0.36-debian-11-r1
  ports:
    - name: mysql
      containerPort: 3306
  volumes:
    - name: mysql-initdb
      configMap:
        name: mysql-initdb-config
  volumeMounts:
    - name: mysql-data
      mountPath: /bitnami/mysql/data
    - name: mysql-initdb
      mountPath: /docker-entrypoint-initdb.d
  volumeClaimTemplates:
    - name: "mysql-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "256Gi"
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/mysql"]
      volumeMounts:
        - name: mysql-data
          mountPath: /opt/rapidfort/local-bucket/data/mysql
  podSecurityContext: {}
  containerSecurityContext: {}
  ingress: {}
  resources: {}
  envVars:
    MYSQL_DATABASE: keycloak
    MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command:
        - "mysql"
        - "-h"
        - "localhost"
        - "-u"
        - "{{ .Values.db.auth.username }}"
        - "-p{{ .Values.db.auth.password }}"
        - "-e"
        - "SHOW DATABASES;"
    failureThreshold: 10
  readinessProbe:
    exec:
      command:
        - "mysql"
        - "-h"
        - "localhost"
        - "-u"
        - "{{ .Values.db.auth.username }}"
        - "-p{{ .Values.db.auth.password }}"
        - "-e"
        - "SHOW DATABASES;"
    failureThreshold: 10
#
# redis
#
redis:
  enabled: true
  replicaCount: 1
  image: registry1.dso.mil/ironbank/bitnami/redis:7.2.4
  ports:
    - containerPort: 6379
      name: redis
  volumeMounts:
    - name: redis-data
      mountPath: /bitnami/redis/data
  volumeClaimTemplates:
    - name: "redis-data"
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: "128Gi"
  initContainers:
    - name: disk-init
      image: registry1.dso.mil/ironbank/redhat/ubi/ubi8-minimal:8.9
      command: ["chown", "1001", "/opt/rapidfort/local-bucket/data/redis"]
      volumeMounts:
        - name: redis-data
          mountPath: /opt/rapidfort/local-bucket/data/redis
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 6379
  ingress: {}
  resources:
    limits:
      cpu: "2"
      memory: "6144Mi"
    requests:
      cpu: "1"
      memory: "2048Mi"
  envVars:
    ALLOW_EMPTY_PASSWORD: "yes"
    REDIS_AOF_ENABLED: "no"
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
  readinessProbe:
    exec:
      command: ["redis-cli", "ping"]
    failureThreshold: 10
#
# rf-scan
#
rfscan:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rf-scan-exe:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
  initContainers: []
  serviceAccount: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    hosts:
      - host:
        paths:
          - path: /rf-scan/
            pathType: Prefix
  resources: {}
  envVars:
    LC_ALL: en_US.UTF-8
  envVarsSecret:
    - AWS_DEFAULT_REGION
    - DB_URL
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - KEYCLOAK_JWT_PUB_KEY
    - KEYCLOAK_REALM
    - KEYCLOAK_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_ID
    - KEYCLOAK_SERVICE_ACCOUNT_CLIENT_SECRET
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# rfapi
#
rfapi:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rfapi-exe:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  service:
    port: 80
    targetPort: 8080
  ingress:
    ingressClassName: ""
    http:
      annotations:
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      hosts:
        - host:
          paths:
            - path: /rfapi/
              pathType: Prefix
    websocket:
      annotations:
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_set_header Upgrade "websocket";
          proxy_set_header Connection "Upgrade";
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/server-snippets: |
          location /rfapi/events {
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
          }
      hosts:
        - host:
          paths:
            - path: /rfapi/events
              pathType: Prefix
  resources: {}
  envVars: {}
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# rfpubsub
#
rfpubsub:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/rfpubsub-exe:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header Upgrade "websocket";
        proxy_set_header Connection "Upgrade";
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippets: |
        location /rfpubsub/events {
          proxy_set_header X-Forwarded-Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host $host;
        }
    hosts:
      - host:
        paths:
          - path: /rfpubsub
            pathType: Prefix
  resources: {}
  envVars:
    RFPUBSUB_WS_PORT: 8080
    API_KEY: 03f4b34739f506f88c9bbc3410b5d070
    RF_API_SERVER: iso-master
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}
#
# runner
#
runner:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/runner:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  ephemeralVolumeClaimTemplates:
    - name: var-lib-containers
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
    - name: imgs-work-dir
      accessMode: "ReadWriteOnce"
      storageClassName: "{{ .Values.storageClass.name }}"
      size: 256Gi
  volumes: []
  volumeMounts:
    - name: imgs-work-dir
      mountPath: /opt/rapidfort/local-bucket
    - name: var-lib-containers
      mountPath: /var/lib/containers
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  # privileged: true
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
    hosts:
      - host:
        paths:
          - path: /runner/
            pathType: Prefix
  resources: {}
  envVars:
    RFVDB_HOST: frontrow.rapidfort.com
    RF_CONTAINER_ENGINE: podman
    RF_INTERNAL: 1
    RF_DEBUG: no
  envVarsSecret:
    - RF_APP_HOST
    - DB_URL
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_APP_ADMIN
    - RF_APP_ADMIN_PASSWD
    - RF_STORAGE_TYPE
    - RF_S3_BUCKET
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_ROLE_ARN
    - RF_GS_CREDS
    - RF_AZURE_CONNECTION_STRING
    - KEYCLOAK_JWT_PUB_KEY
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# rfvdb
#
rfvdb:
  enabled: false
  replicaCount: 1
  image: registry1.dso.mil/ironbank/rapidfort/rfvdb:1.1.45-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "1250m"
    hosts:
      - host:
        paths:
          - path: /rfvdb/
            pathType: Prefix
  resources: {}
  envVars:
    RF_DEBUG: "no"
    RF_RFVDB_PORT: "8080"
  envVarsSecret:
    - RF_S3_BUCKET
    - RF_STORAGE_TYPE
    - AWS_ACCESS_KEY_ID
    - AWS_DEFAULT_REGION
    - AWS_SECRET_ACCESS_KEY
    - RF_GS_CREDS
    - RF_ROLE_ARN
    - RF_APP_HOST
    - DEPLOY_MODE
    - RF_VERBOSE
    - RF_AZURE_CONNECTION_STRING
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
#
# vulns-db
#
vulnsdb:
  enabled: true
  replicaCount: 1
  image: 274057717848.dkr.ecr.us-east-1.amazonaws.com/vulns-db:1.1.86-rfhardened
  ports:
    - name: http
      containerPort: 8080
  volumes: {}
  volumeMounts: {}
  initContainers: []
  podSecurityContext: {}
  containerSecurityContext: {}
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  ingress:
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "250m"
    hosts:
      - host:
        paths:
          - path: /vulns-db/
            pathType: Prefix
  resources:
    limits:
      cpu: "2"
      memory: "4096Mi"
    requests:
      cpu: "1"
      memory: "512Mi"
  envVars:
    RFVDB_HOST: vulndb.rapidfort.com
    RF_DEBUG: no
    REDIS_AOF_ENABLED: no
  envVarsSecret: {}
  startupProbe: {}
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    failureThreshold: 10
# -- Big Bang Values
domain: bigbang.dev
istio:
  enabled: true
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    # PERMISSIVE is required for any action which redeploys pods because STRICT interferes with initContainers
    # Can be changed to STRICT after all initContainers have finished but will interfere with upgrades/pod deployments that have initContainers
    mode: STRICT
  rapidfort:
    enabled: true
    allowed_rf_host: "us01.rapidfort.com"
    gateways:
      - istio-system/public
    hosts:
      - rapidfort.{{ .Values.domain }}
networkPolicies:
  enabled: true
  ingressLabels:
    app: public-ingressgateway
    istio: ingressgateway
  # -- IP range of api.rapidfort.com
  rapidfortApiIpRange: ""
  # -- test
  controlPlaneCidr: ""
# -- Bigbang helm test values - default disabled
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      # dummy values for now
      # cypress_url: 'http://{{ template "rapidfort-platform.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
      cypress_url: 'http://test.test'
  scripts:
    envs:
      URL: 'http://test.test'
      # URL: 'http://{{ template "rapidfort-platform.name" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.frontrow.service.port }}'
  addons:
    minio:
      enabled: false
