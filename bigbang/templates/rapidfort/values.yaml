{{- $pkg := "rapidfort" }}
{{- define "bigbang.defaults.rapidfort" -}}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
domain: {{ default .Values.domain .Values.hostname }}
istio:
  enabled: {{ .Values.istio.enabled }}
  rapidfort:
    gateways:
    - istio-system/{{ default "public" .Values.rapidfort.ingress.gateway }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  ingressLabels:
    {{- $gateway := default "public" .Values.rapidfort.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}

secret:
{{- with .Values.rapidfort.objectStorage }}
{{- if and .aws_access_key_id .aws_secret_access_key .s3_bucket }}
  aws_access_key_id: {{ .aws_access_key_id }}
  aws_secret_access_key: {{ .aws_secret_access_key }}
  aws_default_region: {{ .aws_default_region }}
  s3_bucket: {{ .s3_bucket }}
  rf_app_admin: {{ .rf_app_admin }}
  rf_app_admin_password: {{ .rf_app_admin_password }}
  storage_type: {{ .storage_type }}  
{{- end }}
{{- end }}

  rf_app_host: {{printf "%s.%s" "rapidfort" .Values.domain }}

{{ if eq .Values.domain "bigbang.dev" }}
runner:
  secret:
    name: rf-runner-secret
{{ end }}

keycloak:
  initContainers:
    init_mysql:
      enabled: {{ not .Values.istio.enabled }}
{{- end }}

{{- /* Create secret */ -}}
{{- if (get .Values $pkg).enabled }}
{{- include "values-secret" (dict "root" $ "package" (get .Values $pkg) "name" $pkg "defaults" (include (printf "bigbang.defaults.%s" $pkg) .)) }}
{{- end }}
